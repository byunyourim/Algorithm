package boj.graph;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.PriorityQueue;
import java.util.StringTokenizer;

public class Boj1446 {
    static List<List<int[]>> graph = new ArrayList<>();
    static int[] dist;
    static int n, d;
    public static void main(String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        StringTokenizer st = new StringTokenizer(br.readLine());

        n = Integer.parseInt(st.nextToken());
        d = Integer.parseInt(st.nextToken());

        dist = new int[d + 1];
        Arrays.fill(dist, Integer.MAX_VALUE);

        for (int i = 0; i <= d; i++) {
            graph.add(new ArrayList<>());
            dist[i] = i;
        }

        for (int i = 0; i < n; i++) {
            st = new StringTokenizer(br.readLine());
            int s = Integer.parseInt(st.nextToken());
            int e = Integer.parseInt(st.nextToken());
            int w = Integer.parseInt(st.nextToken());

            if (e <= d) {
                graph.get(s).add(new int[]{e, w});
            }
        }

        dijkstra(0);

        System.out.println(dist[d]);
    }

    private static void dijkstra(int s) {
        PriorityQueue<int[]> queue = new PriorityQueue<>(Comparator.comparingInt(a -> a[1]));
        queue.offer(new int[]{s, 0});
        dist[s] = 0;

        while (!queue.isEmpty()) {
            int[] current = queue.poll();
            int currentNode = current[0];
            int currentDist = current[1];

            if (currentDist > dist[currentNode]) continue;

            for (int[] next : graph.get(currentNode)) {
                int nextNode = next[0];
                int nextDist = next[1];

                if (dist[nextNode] > currentDist + nextDist) {
                    dist[nextNode] = currentDist + nextDist;
                    queue.offer(new int[]{nextNode, dist[nextNode]});
                }
            }

            if (currentNode < d) {
                dist[currentNode + 1] = Math.min(dist[currentNode + 1], currentDist + 1);
                queue.offer(new int[]{currentNode + 1, dist[currentNode + 1]});
            }
        }
    }
}
